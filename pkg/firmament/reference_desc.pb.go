// Code generated by protoc-gen-go.
// source: reference_desc.proto
// DO NOT EDIT!

package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReferenceDescriptor_ReferenceType int32

const (
	ReferenceDescriptor_TOMBSTONE ReferenceDescriptor_ReferenceType = 0
	ReferenceDescriptor_FUTURE    ReferenceDescriptor_ReferenceType = 1
	ReferenceDescriptor_CONCRETE  ReferenceDescriptor_ReferenceType = 2
	ReferenceDescriptor_STREAM    ReferenceDescriptor_ReferenceType = 3
	ReferenceDescriptor_VALUE     ReferenceDescriptor_ReferenceType = 4
	ReferenceDescriptor_ERROR     ReferenceDescriptor_ReferenceType = 5
)

var ReferenceDescriptor_ReferenceType_name = map[int32]string{
	0: "TOMBSTONE",
	1: "FUTURE",
	2: "CONCRETE",
	3: "STREAM",
	4: "VALUE",
	5: "ERROR",
}
var ReferenceDescriptor_ReferenceType_value = map[string]int32{
	"TOMBSTONE": 0,
	"FUTURE":    1,
	"CONCRETE":  2,
	"STREAM":    3,
	"VALUE":     4,
	"ERROR":     5,
}

func (x ReferenceDescriptor_ReferenceType) String() string {
	return proto.EnumName(ReferenceDescriptor_ReferenceType_name, int32(x))
}
func (ReferenceDescriptor_ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor6, []int{0, 0}
}

type ReferenceDescriptor_ReferenceScope int32

const (
	// TODO(malte): really encode like this?
	ReferenceDescriptor_PUBLIC  ReferenceDescriptor_ReferenceScope = 0
	ReferenceDescriptor_PRIVATE ReferenceDescriptor_ReferenceScope = 1
)

var ReferenceDescriptor_ReferenceScope_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
}
var ReferenceDescriptor_ReferenceScope_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
}

func (x ReferenceDescriptor_ReferenceScope) String() string {
	return proto.EnumName(ReferenceDescriptor_ReferenceScope_name, int32(x))
}
func (ReferenceDescriptor_ReferenceScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor6, []int{0, 1}
}

type ReferenceDescriptor struct {
	Id               []byte                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type             ReferenceDescriptor_ReferenceType  `protobuf:"varint,2,opt,name=type,enum=firmament.ReferenceDescriptor_ReferenceType" json:"type,omitempty"`
	Scope            ReferenceDescriptor_ReferenceScope `protobuf:"varint,3,opt,name=scope,enum=firmament.ReferenceDescriptor_ReferenceScope" json:"scope,omitempty"`
	NonDeterministic bool                               `protobuf:"varint,4,opt,name=non_deterministic,json=nonDeterministic" json:"non_deterministic,omitempty"`
	Size             uint64                             `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Location         string                             `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	InlineData       []byte                             `protobuf:"bytes,7,opt,name=inline_data,json=inlineData,proto3" json:"inline_data,omitempty"`
	ProducingTask    uint64                             `protobuf:"varint,8,opt,name=producing_task,json=producingTask" json:"producing_task,omitempty"`
	TimeToCompute    uint64                             `protobuf:"varint,9,opt,name=time_to_compute,json=timeToCompute" json:"time_to_compute,omitempty"`
	Version          uint64                             `protobuf:"varint,10,opt,name=version" json:"version,omitempty"`
}

func (m *ReferenceDescriptor) Reset()                    { *m = ReferenceDescriptor{} }
func (m *ReferenceDescriptor) String() string            { return proto.CompactTextString(m) }
func (*ReferenceDescriptor) ProtoMessage()               {}
func (*ReferenceDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *ReferenceDescriptor) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReferenceDescriptor) GetType() ReferenceDescriptor_ReferenceType {
	if m != nil {
		return m.Type
	}
	return ReferenceDescriptor_TOMBSTONE
}

func (m *ReferenceDescriptor) GetScope() ReferenceDescriptor_ReferenceScope {
	if m != nil {
		return m.Scope
	}
	return ReferenceDescriptor_PUBLIC
}

func (m *ReferenceDescriptor) GetNonDeterministic() bool {
	if m != nil {
		return m.NonDeterministic
	}
	return false
}

func (m *ReferenceDescriptor) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ReferenceDescriptor) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ReferenceDescriptor) GetInlineData() []byte {
	if m != nil {
		return m.InlineData
	}
	return nil
}

func (m *ReferenceDescriptor) GetProducingTask() uint64 {
	if m != nil {
		return m.ProducingTask
	}
	return 0
}

func (m *ReferenceDescriptor) GetTimeToCompute() uint64 {
	if m != nil {
		return m.TimeToCompute
	}
	return 0
}

func (m *ReferenceDescriptor) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*ReferenceDescriptor)(nil), "firmament.ReferenceDescriptor")
	proto.RegisterEnum("firmament.ReferenceDescriptor_ReferenceType", ReferenceDescriptor_ReferenceType_name, ReferenceDescriptor_ReferenceType_value)
	proto.RegisterEnum("firmament.ReferenceDescriptor_ReferenceScope", ReferenceDescriptor_ReferenceScope_name, ReferenceDescriptor_ReferenceScope_value)
}

func init() { proto.RegisterFile("reference_desc.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0x87, 0xeb, 0xd4, 0xf9, 0xe3, 0x69, 0x13, 0x96, 0x81, 0xc3, 0x8a, 0x0b, 0x56, 0x24, 0x90,
	0x11, 0x90, 0x03, 0xbc, 0x00, 0xa9, 0x63, 0xa4, 0x4a, 0x6d, 0x53, 0x6d, 0x36, 0x3d, 0x70, 0xb1,
	0xcc, 0x7a, 0x8a, 0x56, 0xad, 0x77, 0xad, 0xdd, 0x2d, 0x52, 0x79, 0x14, 0x9e, 0x16, 0xd9, 0x51,
	0x03, 0x95, 0x38, 0xf4, 0x36, 0xf3, 0xcd, 0x7c, 0x3f, 0xd9, 0xa3, 0x85, 0x97, 0x8e, 0xae, 0xc9,
	0x91, 0x51, 0x54, 0xd6, 0xe4, 0xd5, 0xa2, 0x75, 0x36, 0x58, 0x4c, 0xae, 0xb5, 0x6b, 0xaa, 0x86,
	0x4c, 0x98, 0xff, 0x8e, 0xe1, 0x85, 0x78, 0xd8, 0x59, 0x91, 0x57, 0x4e, 0xb7, 0xc1, 0x3a, 0x9c,
	0xc1, 0x40, 0xd7, 0x3c, 0x4a, 0xa3, 0xec, 0x58, 0x0c, 0x74, 0x8d, 0x5f, 0x20, 0x0e, 0xf7, 0x2d,
	0xf1, 0x41, 0x1a, 0x65, 0xb3, 0x4f, 0x1f, 0x16, 0xfb, 0x84, 0xc5, 0x7f, 0xec, 0xbf, 0x4c, 0xde,
	0xb7, 0x24, 0x7a, 0x13, 0x73, 0x18, 0x7a, 0x65, 0x5b, 0xe2, 0x87, 0x7d, 0xc4, 0xc7, 0xa7, 0x46,
	0x6c, 0x3a, 0x49, 0xec, 0x5c, 0x7c, 0x0f, 0xcf, 0x8d, 0x35, 0x65, 0x4d, 0x81, 0x5c, 0xa3, 0x8d,
	0xf6, 0x41, 0x2b, 0x1e, 0xa7, 0x51, 0x36, 0x11, 0xcc, 0x58, 0xb3, 0xfa, 0x97, 0x23, 0x42, 0xec,
	0xf5, 0x2f, 0xe2, 0xc3, 0x34, 0xca, 0x62, 0xd1, 0xd7, 0xf8, 0x0a, 0x26, 0xb7, 0x56, 0x55, 0x41,
	0x5b, 0xc3, 0x47, 0x69, 0x94, 0x25, 0x62, 0xdf, 0xe3, 0x6b, 0x38, 0xd2, 0xe6, 0x56, 0x1b, 0x2a,
	0xeb, 0x2a, 0x54, 0x7c, 0xdc, 0xff, 0x3c, 0xec, 0xd0, 0xaa, 0x0a, 0x15, 0xbe, 0x81, 0x59, 0xeb,
	0x6c, 0x7d, 0xa7, 0xb4, 0xf9, 0x51, 0x86, 0xca, 0xdf, 0xf0, 0x49, 0x1f, 0x3d, 0xdd, 0x53, 0x59,
	0xf9, 0x1b, 0x7c, 0x0b, 0xcf, 0x82, 0x6e, 0xa8, 0x0c, 0xb6, 0x54, 0xb6, 0x69, 0xef, 0x02, 0xf1,
	0x64, 0xb7, 0xd7, 0x61, 0x69, 0xf3, 0x1d, 0x44, 0x0e, 0xe3, 0x9f, 0xe4, 0x7c, 0xf7, 0x29, 0xd0,
	0xcf, 0x1f, 0xda, 0xf9, 0x37, 0x98, 0x3e, 0x3a, 0x21, 0x4e, 0x21, 0x91, 0xeb, 0xf3, 0x93, 0x8d,
	0x5c, 0x5f, 0x14, 0xec, 0x00, 0x01, 0x46, 0x5f, 0xb7, 0x72, 0x2b, 0x0a, 0x16, 0xe1, 0x31, 0x4c,
	0xf2, 0xf5, 0x45, 0x2e, 0x0a, 0x59, 0xb0, 0x41, 0x37, 0xd9, 0x48, 0x51, 0x2c, 0xcf, 0xd9, 0x21,
	0x26, 0x30, 0xbc, 0x5a, 0x9e, 0x6d, 0x0b, 0x16, 0x77, 0x65, 0x21, 0xc4, 0x5a, 0xb0, 0xe1, 0xfc,
	0x1d, 0xcc, 0x1e, 0xdf, 0xb6, 0x73, 0x2e, 0xb7, 0x27, 0x67, 0xa7, 0x39, 0x3b, 0xc0, 0x23, 0x18,
	0x5f, 0x8a, 0xd3, 0xab, 0xa5, 0x2c, 0x58, 0xf4, 0x7d, 0xd4, 0x3f, 0x97, 0xcf, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x06, 0x19, 0xde, 0x67, 0x46, 0x02, 0x00, 0x00,
}
