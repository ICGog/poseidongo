// Code generated by protoc-gen-go.
// source: firmament_scheduler.proto
// DO NOT EDIT!

package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskReplyType int32

const (
	TaskReplyType_TASK_COMPLETED_OK      TaskReplyType = 0
	TaskReplyType_TASK_SUBMITTED_OK      TaskReplyType = 1
	TaskReplyType_TASK_REMOVED_OK        TaskReplyType = 2
	TaskReplyType_TASK_FAILED_OK         TaskReplyType = 3
	TaskReplyType_TASK_NOT_FOUND         TaskReplyType = 4
	TaskReplyType_TASK_JOB_NOT_FOUND     TaskReplyType = 5
	TaskReplyType_TASK_ALREADY_SUBMITTED TaskReplyType = 6
	TaskReplyType_TASK_STATE_NOT_CREATED TaskReplyType = 7
)

var TaskReplyType_name = map[int32]string{
	0: "TASK_COMPLETED_OK",
	1: "TASK_SUBMITTED_OK",
	2: "TASK_REMOVED_OK",
	3: "TASK_FAILED_OK",
	4: "TASK_NOT_FOUND",
	5: "TASK_JOB_NOT_FOUND",
	6: "TASK_ALREADY_SUBMITTED",
	7: "TASK_STATE_NOT_CREATED",
}
var TaskReplyType_value = map[string]int32{
	"TASK_COMPLETED_OK":      0,
	"TASK_SUBMITTED_OK":      1,
	"TASK_REMOVED_OK":        2,
	"TASK_FAILED_OK":         3,
	"TASK_NOT_FOUND":         4,
	"TASK_JOB_NOT_FOUND":     5,
	"TASK_ALREADY_SUBMITTED": 6,
	"TASK_STATE_NOT_CREATED": 7,
}

func (x TaskReplyType) String() string {
	return proto.EnumName(TaskReplyType_name, int32(x))
}
func (TaskReplyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type NodeReplyType int32

const (
	NodeReplyType_NODE_ADDED_OK       NodeReplyType = 0
	NodeReplyType_NODE_FAILED_OK      NodeReplyType = 1
	NodeReplyType_NODE_REMOVED_OK     NodeReplyType = 2
	NodeReplyType_NODE_NOT_FOUND      NodeReplyType = 3
	NodeReplyType_NODE_ALREADY_EXISTS NodeReplyType = 4
)

var NodeReplyType_name = map[int32]string{
	0: "NODE_ADDED_OK",
	1: "NODE_FAILED_OK",
	2: "NODE_REMOVED_OK",
	3: "NODE_NOT_FOUND",
	4: "NODE_ALREADY_EXISTS",
}
var NodeReplyType_value = map[string]int32{
	"NODE_ADDED_OK":       0,
	"NODE_FAILED_OK":      1,
	"NODE_REMOVED_OK":     2,
	"NODE_NOT_FOUND":      3,
	"NODE_ALREADY_EXISTS": 4,
}

func (x NodeReplyType) String() string {
	return proto.EnumName(NodeReplyType_name, int32(x))
}
func (NodeReplyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ScheduleRequest struct {
}

func (m *ScheduleRequest) Reset()                    { *m = ScheduleRequest{} }
func (m *ScheduleRequest) String() string            { return proto.CompactTextString(m) }
func (*ScheduleRequest) ProtoMessage()               {}
func (*ScheduleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SchedulingDeltas struct {
	Deltas []*SchedulingDelta `protobuf:"bytes,1,rep,name=deltas" json:"deltas,omitempty"`
}

func (m *SchedulingDeltas) Reset()                    { *m = SchedulingDeltas{} }
func (m *SchedulingDeltas) String() string            { return proto.CompactTextString(m) }
func (*SchedulingDeltas) ProtoMessage()               {}
func (*SchedulingDeltas) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SchedulingDeltas) GetDeltas() []*SchedulingDelta {
	if m != nil {
		return m.Deltas
	}
	return nil
}

type TaskCompletedResponse struct {
	Type TaskReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.TaskReplyType" json:"type,omitempty"`
}

func (m *TaskCompletedResponse) Reset()                    { *m = TaskCompletedResponse{} }
func (m *TaskCompletedResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskCompletedResponse) ProtoMessage()               {}
func (*TaskCompletedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *TaskCompletedResponse) GetType() TaskReplyType {
	if m != nil {
		return m.Type
	}
	return TaskReplyType_TASK_COMPLETED_OK
}

type TaskDescription struct {
	TaskDescriptor *TaskDescriptor `protobuf:"bytes,1,opt,name=task_descriptor,json=taskDescriptor" json:"task_descriptor,omitempty"`
	JobDescriptor  *JobDescriptor  `protobuf:"bytes,2,opt,name=job_descriptor,json=jobDescriptor" json:"job_descriptor,omitempty"`
}

func (m *TaskDescription) Reset()                    { *m = TaskDescription{} }
func (m *TaskDescription) String() string            { return proto.CompactTextString(m) }
func (*TaskDescription) ProtoMessage()               {}
func (*TaskDescription) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TaskDescription) GetTaskDescriptor() *TaskDescriptor {
	if m != nil {
		return m.TaskDescriptor
	}
	return nil
}

func (m *TaskDescription) GetJobDescriptor() *JobDescriptor {
	if m != nil {
		return m.JobDescriptor
	}
	return nil
}

type TaskSubmittedResponse struct {
	Type TaskReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.TaskReplyType" json:"type,omitempty"`
}

func (m *TaskSubmittedResponse) Reset()                    { *m = TaskSubmittedResponse{} }
func (m *TaskSubmittedResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskSubmittedResponse) ProtoMessage()               {}
func (*TaskSubmittedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *TaskSubmittedResponse) GetType() TaskReplyType {
	if m != nil {
		return m.Type
	}
	return TaskReplyType_TASK_COMPLETED_OK
}

type TaskRemovedResponse struct {
	Type TaskReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.TaskReplyType" json:"type,omitempty"`
}

func (m *TaskRemovedResponse) Reset()                    { *m = TaskRemovedResponse{} }
func (m *TaskRemovedResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskRemovedResponse) ProtoMessage()               {}
func (*TaskRemovedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *TaskRemovedResponse) GetType() TaskReplyType {
	if m != nil {
		return m.Type
	}
	return TaskReplyType_TASK_COMPLETED_OK
}

type TaskFailedResponse struct {
	Type TaskReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.TaskReplyType" json:"type,omitempty"`
}

func (m *TaskFailedResponse) Reset()                    { *m = TaskFailedResponse{} }
func (m *TaskFailedResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskFailedResponse) ProtoMessage()               {}
func (*TaskFailedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *TaskFailedResponse) GetType() TaskReplyType {
	if m != nil {
		return m.Type
	}
	return TaskReplyType_TASK_COMPLETED_OK
}

type NodeAddedResponse struct {
	Type NodeReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.NodeReplyType" json:"type,omitempty"`
}

func (m *NodeAddedResponse) Reset()                    { *m = NodeAddedResponse{} }
func (m *NodeAddedResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeAddedResponse) ProtoMessage()               {}
func (*NodeAddedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *NodeAddedResponse) GetType() NodeReplyType {
	if m != nil {
		return m.Type
	}
	return NodeReplyType_NODE_ADDED_OK
}

type NodeRemovedResponse struct {
	Type NodeReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.NodeReplyType" json:"type,omitempty"`
}

func (m *NodeRemovedResponse) Reset()                    { *m = NodeRemovedResponse{} }
func (m *NodeRemovedResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeRemovedResponse) ProtoMessage()               {}
func (*NodeRemovedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *NodeRemovedResponse) GetType() NodeReplyType {
	if m != nil {
		return m.Type
	}
	return NodeReplyType_NODE_ADDED_OK
}

type NodeFailedResponse struct {
	Type NodeReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.NodeReplyType" json:"type,omitempty"`
}

func (m *NodeFailedResponse) Reset()                    { *m = NodeFailedResponse{} }
func (m *NodeFailedResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeFailedResponse) ProtoMessage()               {}
func (*NodeFailedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *NodeFailedResponse) GetType() NodeReplyType {
	if m != nil {
		return m.Type
	}
	return NodeReplyType_NODE_ADDED_OK
}

type TaskStatsResponse struct {
	Type TaskReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.TaskReplyType" json:"type,omitempty"`
}

func (m *TaskStatsResponse) Reset()                    { *m = TaskStatsResponse{} }
func (m *TaskStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskStatsResponse) ProtoMessage()               {}
func (*TaskStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *TaskStatsResponse) GetType() TaskReplyType {
	if m != nil {
		return m.Type
	}
	return TaskReplyType_TASK_COMPLETED_OK
}

type ResourceStatsResponse struct {
	Type NodeReplyType `protobuf:"varint,1,opt,name=type,enum=firmament.NodeReplyType" json:"type,omitempty"`
}

func (m *ResourceStatsResponse) Reset()                    { *m = ResourceStatsResponse{} }
func (m *ResourceStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*ResourceStatsResponse) ProtoMessage()               {}
func (*ResourceStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *ResourceStatsResponse) GetType() NodeReplyType {
	if m != nil {
		return m.Type
	}
	return NodeReplyType_NODE_ADDED_OK
}

type TaskUID struct {
	TaskUid uint64 `protobuf:"varint,1,opt,name=task_uid,json=taskUid" json:"task_uid,omitempty"`
}

func (m *TaskUID) Reset()                    { *m = TaskUID{} }
func (m *TaskUID) String() string            { return proto.CompactTextString(m) }
func (*TaskUID) ProtoMessage()               {}
func (*TaskUID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *TaskUID) GetTaskUid() uint64 {
	if m != nil {
		return m.TaskUid
	}
	return 0
}

type ResourceUID struct {
	ResourceUid string `protobuf:"bytes,1,opt,name=resource_uid,json=resourceUid" json:"resource_uid,omitempty"`
}

func (m *ResourceUID) Reset()                    { *m = ResourceUID{} }
func (m *ResourceUID) String() string            { return proto.CompactTextString(m) }
func (*ResourceUID) ProtoMessage()               {}
func (*ResourceUID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *ResourceUID) GetResourceUid() string {
	if m != nil {
		return m.ResourceUid
	}
	return ""
}

type TaskStats struct {
	TaskUid             *TaskUID `protobuf:"bytes,1,opt,name=task_uid,json=taskUid" json:"task_uid,omitempty"`
	CpuLimit            uint64   `protobuf:"varint,2,opt,name=cpu_limit,json=cpuLimit" json:"cpu_limit,omitempty"`
	CpuRequest          uint64   `protobuf:"varint,3,opt,name=cpu_request,json=cpuRequest" json:"cpu_request,omitempty"`
	CpuUsage            uint64   `protobuf:"varint,4,opt,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
	MemLimit            uint64   `protobuf:"varint,5,opt,name=mem_limit,json=memLimit" json:"mem_limit,omitempty"`
	MemRequest          uint64   `protobuf:"varint,6,opt,name=mem_request,json=memRequest" json:"mem_request,omitempty"`
	MemUsage            uint64   `protobuf:"varint,7,opt,name=mem_usage,json=memUsage" json:"mem_usage,omitempty"`
	MemWorkingSet       uint64   `protobuf:"varint,8,opt,name=mem_working_set,json=memWorkingSet" json:"mem_working_set,omitempty"`
	MemPageFaults       uint64   `protobuf:"varint,9,opt,name=mem_page_faults,json=memPageFaults" json:"mem_page_faults,omitempty"`
	MemPageFaultsRate   float64  `protobuf:"fixed64,10,opt,name=mem_page_faults_rate,json=memPageFaultsRate" json:"mem_page_faults_rate,omitempty"`
	MajorPageFaults     uint64   `protobuf:"varint,11,opt,name=major_page_faults,json=majorPageFaults" json:"major_page_faults,omitempty"`
	MajorPageFaultsRate float64  `protobuf:"fixed64,12,opt,name=major_page_faults_rate,json=majorPageFaultsRate" json:"major_page_faults_rate,omitempty"`
	NetRx               uint64   `protobuf:"varint,13,opt,name=net_rx,json=netRx" json:"net_rx,omitempty"`
	NetRxErrors         uint64   `protobuf:"varint,14,opt,name=net_rx_errors,json=netRxErrors" json:"net_rx_errors,omitempty"`
	NetRxErrorsRate     float64  `protobuf:"fixed64,15,opt,name=net_rx_errors_rate,json=netRxErrorsRate" json:"net_rx_errors_rate,omitempty"`
	NetRxRate           float64  `protobuf:"fixed64,16,opt,name=net_rx_rate,json=netRxRate" json:"net_rx_rate,omitempty"`
	NetTx               uint64   `protobuf:"varint,17,opt,name=net_tx,json=netTx" json:"net_tx,omitempty"`
	NetTxErrors         uint64   `protobuf:"varint,18,opt,name=net_tx_errors,json=netTxErrors" json:"net_tx_errors,omitempty"`
	NetTxErrorsRate     float64  `protobuf:"fixed64,19,opt,name=net_tx_errors_rate,json=netTxErrorsRate" json:"net_tx_errors_rate,omitempty"`
	NetTxRate           float64  `protobuf:"fixed64,20,opt,name=net_tx_rate,json=netTxRate" json:"net_tx_rate,omitempty"`
}

func (m *TaskStats) Reset()                    { *m = TaskStats{} }
func (m *TaskStats) String() string            { return proto.CompactTextString(m) }
func (*TaskStats) ProtoMessage()               {}
func (*TaskStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *TaskStats) GetTaskUid() *TaskUID {
	if m != nil {
		return m.TaskUid
	}
	return nil
}

func (m *TaskStats) GetCpuLimit() uint64 {
	if m != nil {
		return m.CpuLimit
	}
	return 0
}

func (m *TaskStats) GetCpuRequest() uint64 {
	if m != nil {
		return m.CpuRequest
	}
	return 0
}

func (m *TaskStats) GetCpuUsage() uint64 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

func (m *TaskStats) GetMemLimit() uint64 {
	if m != nil {
		return m.MemLimit
	}
	return 0
}

func (m *TaskStats) GetMemRequest() uint64 {
	if m != nil {
		return m.MemRequest
	}
	return 0
}

func (m *TaskStats) GetMemUsage() uint64 {
	if m != nil {
		return m.MemUsage
	}
	return 0
}

func (m *TaskStats) GetMemWorkingSet() uint64 {
	if m != nil {
		return m.MemWorkingSet
	}
	return 0
}

func (m *TaskStats) GetMemPageFaults() uint64 {
	if m != nil {
		return m.MemPageFaults
	}
	return 0
}

func (m *TaskStats) GetMemPageFaultsRate() float64 {
	if m != nil {
		return m.MemPageFaultsRate
	}
	return 0
}

func (m *TaskStats) GetMajorPageFaults() uint64 {
	if m != nil {
		return m.MajorPageFaults
	}
	return 0
}

func (m *TaskStats) GetMajorPageFaultsRate() float64 {
	if m != nil {
		return m.MajorPageFaultsRate
	}
	return 0
}

func (m *TaskStats) GetNetRx() uint64 {
	if m != nil {
		return m.NetRx
	}
	return 0
}

func (m *TaskStats) GetNetRxErrors() uint64 {
	if m != nil {
		return m.NetRxErrors
	}
	return 0
}

func (m *TaskStats) GetNetRxErrorsRate() float64 {
	if m != nil {
		return m.NetRxErrorsRate
	}
	return 0
}

func (m *TaskStats) GetNetRxRate() float64 {
	if m != nil {
		return m.NetRxRate
	}
	return 0
}

func (m *TaskStats) GetNetTx() uint64 {
	if m != nil {
		return m.NetTx
	}
	return 0
}

func (m *TaskStats) GetNetTxErrors() uint64 {
	if m != nil {
		return m.NetTxErrors
	}
	return 0
}

func (m *TaskStats) GetNetTxErrorsRate() float64 {
	if m != nil {
		return m.NetTxErrorsRate
	}
	return 0
}

func (m *TaskStats) GetNetTxRate() float64 {
	if m != nil {
		return m.NetTxRate
	}
	return 0
}

type ResourceStats struct {
	ResourceUid    *ResourceUID `protobuf:"bytes,1,opt,name=resource_uid,json=resourceUid" json:"resource_uid,omitempty"`
	CpuAllocatable uint64       `protobuf:"varint,2,opt,name=cpu_allocatable,json=cpuAllocatable" json:"cpu_allocatable,omitempty"`
	CpuCapacity    uint64       `protobuf:"varint,3,opt,name=cpu_capacity,json=cpuCapacity" json:"cpu_capacity,omitempty"`
	CpuReservation uint64       `protobuf:"varint,4,opt,name=cpu_reservation,json=cpuReservation" json:"cpu_reservation,omitempty"`
	CpuUtilization uint64       `protobuf:"varint,5,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	MemAllocatable uint64       `protobuf:"varint,6,opt,name=mem_allocatable,json=memAllocatable" json:"mem_allocatable,omitempty"`
	MemCapacity    uint64       `protobuf:"varint,7,opt,name=mem_capacity,json=memCapacity" json:"mem_capacity,omitempty"`
	MemReservation uint64       `protobuf:"varint,8,opt,name=mem_reservation,json=memReservation" json:"mem_reservation,omitempty"`
	MemUtilization uint64       `protobuf:"varint,9,opt,name=mem_utilization,json=memUtilization" json:"mem_utilization,omitempty"`
}

func (m *ResourceStats) Reset()                    { *m = ResourceStats{} }
func (m *ResourceStats) String() string            { return proto.CompactTextString(m) }
func (*ResourceStats) ProtoMessage()               {}
func (*ResourceStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ResourceStats) GetResourceUid() *ResourceUID {
	if m != nil {
		return m.ResourceUid
	}
	return nil
}

func (m *ResourceStats) GetCpuAllocatable() uint64 {
	if m != nil {
		return m.CpuAllocatable
	}
	return 0
}

func (m *ResourceStats) GetCpuCapacity() uint64 {
	if m != nil {
		return m.CpuCapacity
	}
	return 0
}

func (m *ResourceStats) GetCpuReservation() uint64 {
	if m != nil {
		return m.CpuReservation
	}
	return 0
}

func (m *ResourceStats) GetCpuUtilization() uint64 {
	if m != nil {
		return m.CpuUtilization
	}
	return 0
}

func (m *ResourceStats) GetMemAllocatable() uint64 {
	if m != nil {
		return m.MemAllocatable
	}
	return 0
}

func (m *ResourceStats) GetMemCapacity() uint64 {
	if m != nil {
		return m.MemCapacity
	}
	return 0
}

func (m *ResourceStats) GetMemReservation() uint64 {
	if m != nil {
		return m.MemReservation
	}
	return 0
}

func (m *ResourceStats) GetMemUtilization() uint64 {
	if m != nil {
		return m.MemUtilization
	}
	return 0
}

func init() {
	proto.RegisterType((*ScheduleRequest)(nil), "firmament.ScheduleRequest")
	proto.RegisterType((*SchedulingDeltas)(nil), "firmament.SchedulingDeltas")
	proto.RegisterType((*TaskCompletedResponse)(nil), "firmament.TaskCompletedResponse")
	proto.RegisterType((*TaskDescription)(nil), "firmament.TaskDescription")
	proto.RegisterType((*TaskSubmittedResponse)(nil), "firmament.TaskSubmittedResponse")
	proto.RegisterType((*TaskRemovedResponse)(nil), "firmament.TaskRemovedResponse")
	proto.RegisterType((*TaskFailedResponse)(nil), "firmament.TaskFailedResponse")
	proto.RegisterType((*NodeAddedResponse)(nil), "firmament.NodeAddedResponse")
	proto.RegisterType((*NodeRemovedResponse)(nil), "firmament.NodeRemovedResponse")
	proto.RegisterType((*NodeFailedResponse)(nil), "firmament.NodeFailedResponse")
	proto.RegisterType((*TaskStatsResponse)(nil), "firmament.TaskStatsResponse")
	proto.RegisterType((*ResourceStatsResponse)(nil), "firmament.ResourceStatsResponse")
	proto.RegisterType((*TaskUID)(nil), "firmament.TaskUID")
	proto.RegisterType((*ResourceUID)(nil), "firmament.ResourceUID")
	proto.RegisterType((*TaskStats)(nil), "firmament.TaskStats")
	proto.RegisterType((*ResourceStats)(nil), "firmament.ResourceStats")
	proto.RegisterEnum("firmament.TaskReplyType", TaskReplyType_name, TaskReplyType_value)
	proto.RegisterEnum("firmament.NodeReplyType", NodeReplyType_name, NodeReplyType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FirmamentScheduler service

type FirmamentSchedulerClient interface {
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*SchedulingDeltas, error)
	TaskCompleted(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskCompletedResponse, error)
	TaskFailed(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskFailedResponse, error)
	TaskRemoved(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskRemovedResponse, error)
	TaskSubmitted(ctx context.Context, in *TaskDescription, opts ...grpc.CallOption) (*TaskSubmittedResponse, error)
	NodeAdded(ctx context.Context, in *ResourceTopologyNodeDescriptor, opts ...grpc.CallOption) (*NodeAddedResponse, error)
	NodeFailed(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeFailedResponse, error)
	NodeRemoved(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeRemovedResponse, error)
	AddTaskStats(ctx context.Context, in *TaskStats, opts ...grpc.CallOption) (*TaskStatsResponse, error)
	AddNodeStats(ctx context.Context, in *ResourceStats, opts ...grpc.CallOption) (*ResourceStatsResponse, error)
}

type firmamentSchedulerClient struct {
	cc *grpc.ClientConn
}

func NewFirmamentSchedulerClient(cc *grpc.ClientConn) FirmamentSchedulerClient {
	return &firmamentSchedulerClient{cc}
}

func (c *firmamentSchedulerClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*SchedulingDeltas, error) {
	out := new(SchedulingDeltas)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/Schedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) TaskCompleted(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskCompletedResponse, error) {
	out := new(TaskCompletedResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/TaskCompleted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) TaskFailed(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskFailedResponse, error) {
	out := new(TaskFailedResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/TaskFailed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) TaskRemoved(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskRemovedResponse, error) {
	out := new(TaskRemovedResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/TaskRemoved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) TaskSubmitted(ctx context.Context, in *TaskDescription, opts ...grpc.CallOption) (*TaskSubmittedResponse, error) {
	out := new(TaskSubmittedResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/TaskSubmitted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) NodeAdded(ctx context.Context, in *ResourceTopologyNodeDescriptor, opts ...grpc.CallOption) (*NodeAddedResponse, error) {
	out := new(NodeAddedResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/NodeAdded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) NodeFailed(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeFailedResponse, error) {
	out := new(NodeFailedResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/NodeFailed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) NodeRemoved(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeRemovedResponse, error) {
	out := new(NodeRemovedResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/NodeRemoved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) AddTaskStats(ctx context.Context, in *TaskStats, opts ...grpc.CallOption) (*TaskStatsResponse, error) {
	out := new(TaskStatsResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/AddTaskStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmamentSchedulerClient) AddNodeStats(ctx context.Context, in *ResourceStats, opts ...grpc.CallOption) (*ResourceStatsResponse, error) {
	out := new(ResourceStatsResponse)
	err := grpc.Invoke(ctx, "/firmament.FirmamentScheduler/AddNodeStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FirmamentScheduler service

type FirmamentSchedulerServer interface {
	Schedule(context.Context, *ScheduleRequest) (*SchedulingDeltas, error)
	TaskCompleted(context.Context, *TaskUID) (*TaskCompletedResponse, error)
	TaskFailed(context.Context, *TaskUID) (*TaskFailedResponse, error)
	TaskRemoved(context.Context, *TaskUID) (*TaskRemovedResponse, error)
	TaskSubmitted(context.Context, *TaskDescription) (*TaskSubmittedResponse, error)
	NodeAdded(context.Context, *ResourceTopologyNodeDescriptor) (*NodeAddedResponse, error)
	NodeFailed(context.Context, *ResourceUID) (*NodeFailedResponse, error)
	NodeRemoved(context.Context, *ResourceUID) (*NodeRemovedResponse, error)
	AddTaskStats(context.Context, *TaskStats) (*TaskStatsResponse, error)
	AddNodeStats(context.Context, *ResourceStats) (*ResourceStatsResponse, error)
}

func RegisterFirmamentSchedulerServer(s *grpc.Server, srv FirmamentSchedulerServer) {
	s.RegisterService(&_FirmamentScheduler_serviceDesc, srv)
}

func _FirmamentScheduler_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/Schedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_TaskCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).TaskCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/TaskCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).TaskCompleted(ctx, req.(*TaskUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_TaskFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).TaskFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/TaskFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).TaskFailed(ctx, req.(*TaskUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_TaskRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).TaskRemoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/TaskRemoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).TaskRemoved(ctx, req.(*TaskUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_TaskSubmitted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).TaskSubmitted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/TaskSubmitted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).TaskSubmitted(ctx, req.(*TaskDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_NodeAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceTopologyNodeDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).NodeAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/NodeAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).NodeAdded(ctx, req.(*ResourceTopologyNodeDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_NodeFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).NodeFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/NodeFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).NodeFailed(ctx, req.(*ResourceUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_NodeRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).NodeRemoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/NodeRemoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).NodeRemoved(ctx, req.(*ResourceUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_AddTaskStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).AddTaskStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/AddTaskStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).AddTaskStats(ctx, req.(*TaskStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmamentScheduler_AddNodeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmamentSchedulerServer).AddNodeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmament.FirmamentScheduler/AddNodeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmamentSchedulerServer).AddNodeStats(ctx, req.(*ResourceStats))
	}
	return interceptor(ctx, in, info, handler)
}

var _FirmamentScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "firmament.FirmamentScheduler",
	HandlerType: (*FirmamentSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Schedule",
			Handler:    _FirmamentScheduler_Schedule_Handler,
		},
		{
			MethodName: "TaskCompleted",
			Handler:    _FirmamentScheduler_TaskCompleted_Handler,
		},
		{
			MethodName: "TaskFailed",
			Handler:    _FirmamentScheduler_TaskFailed_Handler,
		},
		{
			MethodName: "TaskRemoved",
			Handler:    _FirmamentScheduler_TaskRemoved_Handler,
		},
		{
			MethodName: "TaskSubmitted",
			Handler:    _FirmamentScheduler_TaskSubmitted_Handler,
		},
		{
			MethodName: "NodeAdded",
			Handler:    _FirmamentScheduler_NodeAdded_Handler,
		},
		{
			MethodName: "NodeFailed",
			Handler:    _FirmamentScheduler_NodeFailed_Handler,
		},
		{
			MethodName: "NodeRemoved",
			Handler:    _FirmamentScheduler_NodeRemoved_Handler,
		},
		{
			MethodName: "AddTaskStats",
			Handler:    _FirmamentScheduler_AddTaskStats_Handler,
		},
		{
			MethodName: "AddNodeStats",
			Handler:    _FirmamentScheduler_AddNodeStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "firmament_scheduler.proto",
}

func init() { proto.RegisterFile("firmament_scheduler.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0x5d, 0x72, 0xe3, 0x44,
	0x17, 0xb5, 0x27, 0x76, 0x12, 0x5f, 0x8d, 0xff, 0x3a, 0x93, 0x7c, 0x8a, 0xe7, 0x23, 0x64, 0x54,
	0x14, 0x84, 0x00, 0x81, 0xf2, 0x3c, 0xf1, 0x44, 0x29, 0x96, 0x4c, 0x65, 0x26, 0x89, 0xa7, 0x64,
	0x79, 0x80, 0x27, 0x95, 0x62, 0xf5, 0x04, 0x25, 0x92, 0x25, 0xa4, 0xd6, 0x90, 0xb0, 0x00, 0x96,
	0xc0, 0xa2, 0x58, 0x06, 0xbb, 0xe0, 0x8d, 0xea, 0x6e, 0xa9, 0xf5, 0x63, 0xa5, 0x2a, 0x95, 0x47,
	0x9d, 0x7b, 0xfa, 0xf4, 0xb9, 0x72, 0xdf, 0xd6, 0x31, 0xec, 0x7f, 0x70, 0x23, 0xdf, 0xf6, 0xf1,
	0x8a, 0x58, 0xf1, 0xf2, 0x57, 0xec, 0x24, 0x1e, 0x8e, 0x4e, 0xc2, 0x28, 0x20, 0x01, 0xea, 0x88,
	0xd2, 0xa8, 0x77, 0x13, 0x5c, 0x59, 0x0e, 0x8e, 0x97, 0xbc, 0x34, 0xea, 0x13, 0x3b, 0xbe, 0x2d,
	0x02, 0xaf, 0x22, 0x1c, 0x07, 0x49, 0xb4, 0xc4, 0x16, 0x09, 0xc2, 0xc0, 0x0b, 0xae, 0xef, 0xad,
	0x55, 0xe0, 0xe0, 0x22, 0x65, 0x2f, 0xd5, 0x77, 0x57, 0xd7, 0x96, 0x83, 0x3d, 0x62, 0x73, 0x5c,
	0x19, 0x42, 0x7f, 0x9e, 0xee, 0x6c, 0xe0, 0xdf, 0x12, 0x1c, 0x13, 0x65, 0x0a, 0x83, 0xb9, 0x20,
	0x6b, 0x94, 0x1b, 0xa3, 0x31, 0x6c, 0xb2, 0x55, 0xb1, 0xdc, 0x3c, 0xdc, 0x38, 0x92, 0xc6, 0xa3,
	0x13, 0x61, 0xef, 0xa4, 0x42, 0x36, 0x52, 0xa6, 0xa2, 0xc3, 0xae, 0x69, 0xc7, 0xb7, 0x93, 0xc0,
	0x0f, 0x3d, 0x4c, 0xb0, 0x63, 0xe0, 0x38, 0x0c, 0x56, 0x31, 0x46, 0x5f, 0x43, 0x8b, 0xdc, 0x87,
	0x58, 0x6e, 0x1e, 0x36, 0x8f, 0x7a, 0x63, 0xb9, 0x20, 0x45, 0xf9, 0x06, 0x0e, 0xbd, 0x7b, 0xf3,
	0x3e, 0xc4, 0x06, 0x63, 0x29, 0x7f, 0x35, 0xa1, 0x4f, 0x71, 0x0d, 0xc7, 0xcb, 0xc8, 0x0d, 0x89,
	0x1b, 0xac, 0xd0, 0x29, 0xe4, 0xef, 0x80, 0x62, 0x41, 0xc4, 0xc4, 0xa4, 0xf1, 0x7e, 0x45, 0x4c,
	0x13, 0x04, 0xa3, 0x47, 0x4a, 0xcf, 0xe8, 0x07, 0x10, 0xef, 0x35, 0x95, 0x78, 0xc6, 0x24, 0x8a,
	0x7e, 0xde, 0x04, 0x57, 0x05, 0x85, 0xee, 0x4d, 0xf1, 0x31, 0xeb, 0x6f, 0x9e, 0x5c, 0xf9, 0x2e,
	0x79, 0x7a, 0x7f, 0x13, 0xd8, 0xe1, 0xb0, 0x1f, 0x7c, 0x7c, 0xb2, 0xc8, 0x29, 0x20, 0x0a, 0x4f,
	0x6d, 0xd7, 0x7b, 0xb2, 0x86, 0x0a, 0xc3, 0xcb, 0xc0, 0xc1, 0xaa, 0xe3, 0x3c, 0x4a, 0x82, 0x72,
	0x6b, 0x7a, 0xe1, 0xf0, 0x63, 0x7b, 0xa9, 0x13, 0x39, 0x05, 0x44, 0xe1, 0x47, 0xf7, 0x52, 0xa7,
	0xa1, 0xc2, 0x90, 0xfd, 0x36, 0xc4, 0x26, 0xf1, 0x13, 0x5f, 0x87, 0x0e, 0xbb, 0x46, 0x3a, 0x56,
	0x8f, 0x95, 0xa9, 0x73, 0xf2, 0x19, 0x6c, 0x51, 0xf5, 0xc5, 0x99, 0x86, 0xf6, 0x61, 0x9b, 0x9d,
	0xda, 0xc4, 0x75, 0xd8, 0xe2, 0x96, 0xb1, 0x45, 0x9f, 0x17, 0xae, 0xa3, 0x7c, 0x07, 0x52, 0xb6,
	0x19, 0x65, 0xbe, 0x82, 0xe7, 0x62, 0xa4, 0x33, 0x76, 0xc7, 0x90, 0x32, 0x8c, 0xae, 0xf8, 0xa7,
	0x0d, 0x1d, 0xd1, 0x22, 0xfa, 0xa6, 0x22, 0x2d, 0x8d, 0x51, 0xa5, 0xbd, 0xc5, 0x99, 0x26, 0xb6,
	0x43, 0x2f, 0xa1, 0xb3, 0x0c, 0x13, 0xcb, 0x73, 0x7d, 0x97, 0xb0, 0x63, 0xdf, 0x32, 0xb6, 0x97,
	0x61, 0x72, 0x4e, 0x9f, 0xd1, 0xa7, 0x20, 0xd1, 0x62, 0xc4, 0xaf, 0x03, 0x79, 0x83, 0x95, 0x61,
	0x19, 0x26, 0xe9, 0x05, 0x91, 0xad, 0x4e, 0x62, 0xfb, 0x1a, 0xcb, 0x2d, 0xb1, 0x7a, 0x41, 0x9f,
	0x69, 0xd1, 0xc7, 0x7e, 0x2a, 0xdd, 0xe6, 0x45, 0x1f, 0xfb, 0x42, 0x9a, 0x16, 0x33, 0xe9, 0x4d,
	0x2e, 0xed, 0x63, 0xbf, 0x20, 0x4d, 0x09, 0x5c, 0x7a, 0x4b, 0xac, 0xe6, 0xd2, 0x9f, 0x43, 0x9f,
	0x16, 0x7f, 0x0f, 0xa2, 0x5b, 0x7a, 0x8d, 0xc5, 0x98, 0xc8, 0xdb, 0x8c, 0xd2, 0xf5, 0xb1, 0xff,
	0x13, 0x47, 0xe7, 0x98, 0x64, 0xbc, 0xd0, 0xbe, 0xc6, 0xd6, 0x07, 0x3b, 0xf1, 0x48, 0x2c, 0x77,
	0x04, 0xef, 0x9d, 0x7d, 0x8d, 0xa7, 0x0c, 0x44, 0xdf, 0xc2, 0x8b, 0x0a, 0xcf, 0x8a, 0x6c, 0x82,
	0x65, 0x38, 0x6c, 0x1e, 0x35, 0x8d, 0x61, 0x89, 0x6c, 0xd8, 0x04, 0xa3, 0x63, 0x18, 0xfa, 0xf6,
	0x4d, 0x10, 0x95, 0xa4, 0x25, 0x26, 0xdd, 0x67, 0x85, 0x82, 0xf8, 0x6b, 0xd8, 0x5b, 0xe3, 0x72,
	0xf9, 0xe7, 0x4c, 0x7e, 0xa7, 0xb2, 0x80, 0x6d, 0xb0, 0x0b, 0x9b, 0x2b, 0x4c, 0xac, 0xe8, 0x4e,
	0xee, 0x32, 0xd5, 0xf6, 0x0a, 0x13, 0xe3, 0x0e, 0x29, 0xd0, 0xe5, 0xb0, 0x85, 0xa3, 0x28, 0x88,
	0x62, 0xb9, 0xc7, 0xaa, 0x12, 0xab, 0xea, 0x0c, 0x42, 0x5f, 0x01, 0x2a, 0x71, 0xf8, 0x5e, 0x7d,
	0xb6, 0x57, 0xbf, 0x40, 0x64, 0xfb, 0x1c, 0x80, 0x94, 0x92, 0x19, 0x6b, 0xc0, 0x58, 0x1d, 0xc6,
	0x2a, 0xfa, 0x20, 0x77, 0xf2, 0x50, 0xf8, 0x30, 0x85, 0x0f, 0x22, 0x7c, 0x20, 0xe1, 0xc3, 0xac,
	0xf8, 0x20, 0x65, 0x1f, 0x3b, 0xc2, 0x87, 0x59, 0xe3, 0x83, 0xa4, 0x3e, 0x5e, 0x08, 0x1f, 0x26,
	0xf3, 0xa1, 0xfc, 0xb9, 0x01, 0xdd, 0xd2, 0x10, 0xa2, 0xef, 0x6b, 0x26, 0x43, 0x1a, 0xef, 0x15,
	0x0e, 0x7b, 0x61, 0x8e, 0x4a, 0x13, 0x83, 0xbe, 0x80, 0x3e, 0x3d, 0xb6, 0xb6, 0xe7, 0x05, 0x4b,
	0x9b, 0xd8, 0x57, 0x1e, 0x4e, 0x8f, 0x7e, 0x6f, 0x19, 0x26, 0x6a, 0x8e, 0xd2, 0xe9, 0xa3, 0xc4,
	0xa5, 0x1d, 0xda, 0x4b, 0x97, 0xdc, 0xa7, 0x13, 0x40, 0x87, 0x62, 0x92, 0x42, 0x99, 0x56, 0x84,
	0x63, 0x1c, 0x7d, 0xb4, 0xe9, 0x37, 0x29, 0x1d, 0x84, 0x1e, 0x9b, 0x13, 0x81, 0x66, 0xc4, 0x84,
	0xb8, 0x9e, 0xfb, 0x07, 0x27, 0xb6, 0x05, 0x71, 0x91, 0xa3, 0x94, 0x48, 0x0f, 0x63, 0xd1, 0x1d,
	0x1f, 0x8f, 0x9e, 0x8f, 0xfd, 0x8a, 0x3b, 0x4a, 0x14, 0xee, 0xf8, 0x94, 0xd0, 0xb9, 0x2a, 0xba,
	0xe3, 0x63, 0x96, 0xbb, 0xdb, 0x16, 0x5a, 0x15, 0x77, 0x6c, 0xdc, 0x0a, 0xee, 0x3a, 0x82, 0x58,
	0x70, 0x77, 0xfc, 0x77, 0x13, 0xba, 0xa5, 0x4b, 0x12, 0xed, 0xc2, 0xd0, 0x54, 0xe7, 0x6f, 0xad,
	0xc9, 0xec, 0xe2, 0xdd, 0xb9, 0x6e, 0xea, 0x9a, 0x35, 0x7b, 0x3b, 0x68, 0x08, 0x78, 0xbe, 0x38,
	0xbd, 0x38, 0x33, 0x53, 0xb8, 0x89, 0x76, 0xa0, 0xcf, 0x60, 0x43, 0xbf, 0x98, 0xbd, 0xe7, 0xe0,
	0x33, 0x84, 0xa0, 0xc7, 0xc0, 0xa9, 0x7a, 0x76, 0xce, 0xb1, 0x0d, 0x81, 0x5d, 0xce, 0x4c, 0x6b,
	0x3a, 0x5b, 0x5c, 0x6a, 0x83, 0x16, 0xda, 0x03, 0xc4, 0xb0, 0x37, 0xb3, 0xd3, 0x02, 0xde, 0x46,
	0x23, 0xd8, 0x63, 0xb8, 0x7a, 0x6e, 0xe8, 0xaa, 0xf6, 0x4b, 0xbe, 0xe7, 0x60, 0x53, 0xd4, 0xe6,
	0xa6, 0x6a, 0xea, 0x6c, 0xd5, 0xc4, 0xd0, 0x55, 0x5a, 0xdb, 0x3a, 0xbe, 0x83, 0x6e, 0xe9, 0xa6,
	0x46, 0x43, 0xe8, 0x5e, 0xce, 0x34, 0xdd, 0x52, 0x35, 0x2d, 0xeb, 0x03, 0x41, 0x8f, 0x41, 0xb9,
	0x37, 0xd6, 0x04, 0xc3, 0xaa, 0x4d, 0x30, 0x30, 0x37, 0xb6, 0x81, 0xfe, 0x07, 0x3b, 0x5c, 0x2f,
	0x35, 0xa6, 0xff, 0x7c, 0x36, 0x37, 0xe7, 0x83, 0xd6, 0xf8, 0xdf, 0x36, 0xa0, 0x69, 0x76, 0x52,
	0xb3, 0xdc, 0x15, 0x21, 0x1d, 0xb6, 0xb3, 0x07, 0x54, 0x93, 0xac, 0xb2, 0x64, 0x36, 0x7a, 0xf9,
	0x70, 0xea, 0x8a, 0x95, 0x06, 0xfa, 0x91, 0xff, 0x46, 0x22, 0x70, 0xa1, 0x9a, 0x6f, 0xc0, 0xe8,
	0xb0, 0x82, 0xad, 0xc5, 0x33, 0xa5, 0x81, 0x54, 0x80, 0x3c, 0x4d, 0xd4, 0xaa, 0x7c, 0x52, 0xc1,
	0xca, 0x1f, 0x6b, 0xa5, 0x81, 0x26, 0x20, 0x15, 0x52, 0x4d, 0xad, 0xc6, 0xc1, 0xda, 0x07, 0xb8,
	0x94, 0x1a, 0x94, 0x06, 0x9a, 0xf1, 0x86, 0x44, 0xc2, 0x2a, 0xbd, 0x9c, 0x4a, 0x26, 0x5c, 0x6b,
	0x6c, 0x2d, 0x97, 0x29, 0x0d, 0xf4, 0x1e, 0x3a, 0x22, 0xe2, 0xa0, 0x2f, 0x6b, 0x2e, 0x0d, 0x33,
	0xcd, 0xcf, 0x94, 0x95, 0x47, 0xbd, 0xd1, 0xff, 0x2b, 0x1f, 0xf9, 0x52, 0x46, 0x52, 0x1a, 0x48,
	0x07, 0xc8, 0x23, 0x0b, 0x7a, 0xe0, 0x36, 0x2a, 0xbd, 0xb4, 0xf5, 0x84, 0xc3, 0x7e, 0x40, 0xa9,
	0x10, 0x9f, 0x1e, 0xd4, 0x39, 0x58, 0x8b, 0x1c, 0xd5, 0x17, 0xa7, 0xc1, 0x73, 0xd5, 0x71, 0xf2,
	0x78, 0xf0, 0xa2, 0xfa, 0x6e, 0x28, 0x5a, 0xea, 0x6a, 0x2d, 0x2d, 0x29, 0x0d, 0x74, 0xce, 0x54,
	0xe8, 0x0e, 0x5c, 0x45, 0xae, 0xf1, 0xc3, 0x95, 0x0e, 0x1f, 0xaa, 0xe4, 0x6a, 0x57, 0x9b, 0xec,
	0x0f, 0xc7, 0xeb, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x25, 0xf6, 0x38, 0xf4, 0x0c, 0x00,
	0x00,
}
