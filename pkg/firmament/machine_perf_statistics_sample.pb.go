// Code generated by protoc-gen-go.
// source: machine_perf_statistics_sample.proto
// DO NOT EDIT!

package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MachinePerfStatisticsSample struct {
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	Timestamp  uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	TotalRam   uint64 `protobuf:"varint,3,opt,name=total_ram,json=totalRam" json:"total_ram,omitempty"`
	FreeRam    uint64 `protobuf:"varint,4,opt,name=free_ram,json=freeRam" json:"free_ram,omitempty"`
	// The first entry is the cpu usage of cpu0 and so on.
	CpusUsage []*CpuUsage `protobuf:"bytes,5,rep,name=cpus_usage,json=cpusUsage" json:"cpus_usage,omitempty"`
	DiskBw    uint64      `protobuf:"varint,6,opt,name=disk_bw,json=diskBw" json:"disk_bw,omitempty"`
	NetTxBw   uint64      `protobuf:"varint,7,opt,name=net_tx_bw,json=netTxBw" json:"net_tx_bw,omitempty"`
	NetRxBw   uint64      `protobuf:"varint,8,opt,name=net_rx_bw,json=netRxBw" json:"net_rx_bw,omitempty"`
}

func (m *MachinePerfStatisticsSample) Reset()                    { *m = MachinePerfStatisticsSample{} }
func (m *MachinePerfStatisticsSample) String() string            { return proto.CompactTextString(m) }
func (*MachinePerfStatisticsSample) ProtoMessage()               {}
func (*MachinePerfStatisticsSample) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *MachinePerfStatisticsSample) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *MachinePerfStatisticsSample) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetTotalRam() uint64 {
	if m != nil {
		return m.TotalRam
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetFreeRam() uint64 {
	if m != nil {
		return m.FreeRam
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetCpusUsage() []*CpuUsage {
	if m != nil {
		return m.CpusUsage
	}
	return nil
}

func (m *MachinePerfStatisticsSample) GetDiskBw() uint64 {
	if m != nil {
		return m.DiskBw
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetNetTxBw() uint64 {
	if m != nil {
		return m.NetTxBw
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetNetRxBw() uint64 {
	if m != nil {
		return m.NetRxBw
	}
	return 0
}

type CpuUsage struct {
	User      float64 `protobuf:"fixed64,1,opt,name=user" json:"user,omitempty"`
	Nice      float64 `protobuf:"fixed64,2,opt,name=nice" json:"nice,omitempty"`
	System    float64 `protobuf:"fixed64,3,opt,name=system" json:"system,omitempty"`
	Idle      float64 `protobuf:"fixed64,4,opt,name=idle" json:"idle,omitempty"`
	Iowait    float64 `protobuf:"fixed64,5,opt,name=iowait" json:"iowait,omitempty"`
	Irq       float64 `protobuf:"fixed64,6,opt,name=irq" json:"irq,omitempty"`
	SoftIrq   float64 `protobuf:"fixed64,7,opt,name=soft_irq,json=softIrq" json:"soft_irq,omitempty"`
	Steal     float64 `protobuf:"fixed64,8,opt,name=steal" json:"steal,omitempty"`
	Guest     float64 `protobuf:"fixed64,9,opt,name=guest" json:"guest,omitempty"`
	GuestNice float64 `protobuf:"fixed64,10,opt,name=guest_nice,json=guestNice" json:"guest_nice,omitempty"`
}

func (m *CpuUsage) Reset()                    { *m = CpuUsage{} }
func (m *CpuUsage) String() string            { return proto.CompactTextString(m) }
func (*CpuUsage) ProtoMessage()               {}
func (*CpuUsage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *CpuUsage) GetUser() float64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *CpuUsage) GetNice() float64 {
	if m != nil {
		return m.Nice
	}
	return 0
}

func (m *CpuUsage) GetSystem() float64 {
	if m != nil {
		return m.System
	}
	return 0
}

func (m *CpuUsage) GetIdle() float64 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *CpuUsage) GetIowait() float64 {
	if m != nil {
		return m.Iowait
	}
	return 0
}

func (m *CpuUsage) GetIrq() float64 {
	if m != nil {
		return m.Irq
	}
	return 0
}

func (m *CpuUsage) GetSoftIrq() float64 {
	if m != nil {
		return m.SoftIrq
	}
	return 0
}

func (m *CpuUsage) GetSteal() float64 {
	if m != nil {
		return m.Steal
	}
	return 0
}

func (m *CpuUsage) GetGuest() float64 {
	if m != nil {
		return m.Guest
	}
	return 0
}

func (m *CpuUsage) GetGuestNice() float64 {
	if m != nil {
		return m.GuestNice
	}
	return 0
}

func init() {
	proto.RegisterType((*MachinePerfStatisticsSample)(nil), "firmament.MachinePerfStatisticsSample")
	proto.RegisterType((*CpuUsage)(nil), "firmament.CpuUsage")
}

func init() { proto.RegisterFile("machine_perf_statistics_sample.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xe5, 0x6d, 0x9b, 0xc4, 0xb3, 0x17, 0x64, 0x10, 0x04, 0x16, 0x44, 0xb5, 0xe2, 0xd0,
	0x53, 0x0f, 0xcb, 0x1b, 0x2c, 0xa7, 0x3d, 0x80, 0x90, 0x0b, 0x67, 0xcb, 0x4d, 0x26, 0xc5, 0x22,
	0x4e, 0x52, 0x7b, 0xa2, 0x94, 0x47, 0xe1, 0x25, 0x79, 0x06, 0xe4, 0xc9, 0xb6, 0xbd, 0xfd, 0xff,
	0xff, 0xcd, 0xc4, 0x33, 0xa3, 0xc0, 0x27, 0x6f, 0xab, 0x5f, 0xae, 0x43, 0x33, 0x60, 0x68, 0x4c,
	0x24, 0x4b, 0x2e, 0x92, 0xab, 0xa2, 0x89, 0xd6, 0x0f, 0x2d, 0x6e, 0x87, 0xd0, 0x53, 0xaf, 0x64,
	0xe3, 0x82, 0xb7, 0x1e, 0x3b, 0xba, 0xff, 0x7b, 0x03, 0x77, 0x5f, 0xe7, 0x9e, 0xef, 0x18, 0x9a,
	0xdd, 0xa5, 0x63, 0xc7, 0x0d, 0xea, 0x23, 0xdc, 0x06, 0x8c, 0xfd, 0x18, 0x2a, 0x34, 0xae, 0x2e,
	0xc5, 0x5a, 0x6c, 0xa4, 0x86, 0x73, 0xf4, 0x54, 0xab, 0xf7, 0x20, 0xc9, 0x79, 0x8c, 0x64, 0xfd,
	0x50, 0xde, 0xac, 0xc5, 0x66, 0xa9, 0xaf, 0x81, 0xba, 0x03, 0x49, 0x3d, 0xd9, 0xd6, 0x04, 0xeb,
	0xcb, 0x05, 0xd3, 0x82, 0x03, 0x6d, 0xbd, 0x7a, 0x0b, 0x45, 0x13, 0x10, 0x99, 0x2d, 0x99, 0xe5,
	0xc9, 0x27, 0xf4, 0x00, 0x50, 0x0d, 0x63, 0x34, 0x63, 0xb4, 0x07, 0x2c, 0x57, 0xeb, 0xc5, 0xe6,
	0xf6, 0xe1, 0xe5, 0xf6, 0x32, 0xf6, 0xf6, 0xcb, 0x30, 0xfe, 0x4c, 0x48, 0xcb, 0x54, 0xc6, 0x52,
	0xbd, 0x81, 0xbc, 0x76, 0xf1, 0xb7, 0xd9, 0x4f, 0x65, 0xc6, 0x5f, 0xcb, 0x92, 0x7d, 0x9c, 0xd4,
	0x3b, 0x90, 0x1d, 0x92, 0xa1, 0x53, 0x42, 0xf9, 0xfc, 0x50, 0x87, 0xf4, 0xe3, 0x74, 0x65, 0x81,
	0x59, 0x71, 0x61, 0xfa, 0xf4, 0x38, 0xdd, 0xff, 0x13, 0x50, 0x9c, 0x1f, 0x52, 0x0a, 0x96, 0x63,
	0xc4, 0xc0, 0x17, 0x10, 0x9a, 0x75, 0xca, 0x3a, 0x57, 0x21, 0xaf, 0x2d, 0x34, 0x6b, 0xf5, 0x1a,
	0xb2, 0xf8, 0x27, 0x12, 0xce, 0xeb, 0x0a, 0xfd, 0xec, 0x52, 0xad, 0xab, 0x5b, 0xe4, 0x45, 0x85,
	0x66, 0x9d, 0x6a, 0x5d, 0x3f, 0x59, 0x47, 0xe5, 0x6a, 0xae, 0x9d, 0x9d, 0x7a, 0x01, 0x0b, 0x17,
	0x8e, 0xbc, 0x85, 0xd0, 0x49, 0xa6, 0x53, 0xc5, 0xbe, 0x21, 0x93, 0xe2, 0x9c, 0xe3, 0x3c, 0xf9,
	0xa7, 0x70, 0x54, 0xaf, 0x60, 0x15, 0x09, 0x6d, 0xcb, 0xd3, 0x0b, 0x3d, 0x9b, 0x94, 0x1e, 0x46,
	0x8c, 0x54, 0xca, 0x39, 0x65, 0xa3, 0x3e, 0x00, 0xb0, 0x30, 0x3c, 0x36, 0x30, 0x92, 0x9c, 0x7c,
	0x73, 0x15, 0xee, 0x33, 0xfe, 0x3d, 0x3e, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x75, 0x27,
	0xd0, 0x46, 0x02, 0x00, 0x00,
}
